#BlueJ class context
comment0.target=Editor
comment0.text=\n\ This\ world\ is\ where\ users\ will\ go\ and\ create\ Levels\ to\ play\n
comment1.params=
comment1.target=Editor()
comment1.text=\n\ The\ main\ constructor\ for\ the\ Editor\ Class\n
comment10.params=
comment10.target=void\ checkMouse()
comment10.text=\n\ This\ method\ will\ listen\ to\ the\ mouse's\ actions\ and\ will\ call\ other\ functions\ to\ perform\ the\ mouse\ cactions.\n\ It\ takes\ into\ account\ the\ location\ of\ the\ mouse,\ the\ current\ editing\ state,\ and\ the\ objects\ that\ the\ mouse\ is\ holding.\n
comment11.params=
comment11.target=void\ changeDirectionMenu()
comment11.text=\n\ This\ method\ is\ used\ to\ modify\ the\ direction\ of\ the\ Turrets.\n
comment12.params=
comment12.target=void\ movePlacedObjects()
comment12.text=\n\ This\ is\ to\ move\ objects\ when\ the\ mouse\ is\ dragging\ it\n
comment13.params=
comment13.target=void\ checkDrag()
comment13.text=\n\ This\ is\ used\ to\ determine\ when\ the\ mouse\ is\ dragging\ and\ object.\n
comment14.params=m
comment14.target=void\ toggleDrag(greenfoot.MouseInfo)
comment14.text=\n\ method\ checks\ if\ the\ mouse\ if\ clicking\ on\ an\ actor\ and\ toggles\ the\ dragging\ for\ the\ actor\ based\ on\ whether\ of\ not\ it\ is\ already\ being\ dragged\ \n
comment15.params=beingDragged
comment15.target=void\ drag(greenfoot.Actor)
comment15.text=\n\ the\ code\ the\ actually\ drags\ the\ actor\ and\ moves\ it\ based\ on\ the\ location\ of\ the\ mouse\ \n
comment16.params=
comment16.target=void\ checkKeys()
comment16.text=\n\ controls\ the\ movement\ of\ the\ hero\n
comment17.params=
comment17.target=boolean\ returnBuildState()
comment17.text=\n\ This\ method\ will\ be\ called\ by\ external\ classes\ to\ ensure\ that\ objects\ will\ only\ move\ when\ the\ Editor\ is\ in\ the\ "play"\ mode\n
comment18.params=
comment18.target=void\ toggleBuildState()
comment18.text=\n\ This\ is\ reset\ and\ place\ all\ of\ the\ elements\ in\ the\ top\ bar\ to\ turn\ the\ "play"\ mode\ into\ "editing"\ mode.\n
comment19.params=
comment19.target=void\ saveToFile()
comment19.text=\n\ This\ method\ will\ take\ all\ of\ the\ different\ objects\ in\ the\ world\ and\ save\ it\ into\ a\ txt\ file\ for\ later\ use.\n
comment2.params=itemId
comment2.target=void\ holdObj(int)
comment2.text=\n\ This\ method\ gets\ called\ when\ a\ user\ clicks\ on\ an\ object\ in\ the\ top\ bar\ and\ will\ generate\ a\ copy\ of\ that\ object\ for\ them\ to\ hold\n
comment20.params=
comment20.target=void\ saveGameUI()
comment20.text=\n\ This\ method\ is\ the\ ui\ that\ will\ prompt\ hte\ user\ to\ save\ their\ game.\n
comment21.params=
comment21.target=void\ loadGame()
comment21.text=\n\ This\ method\ is\ used\ by\ the\ player\ to\ select\ a\ game\ save.\ It\ loads\ the\ UI\ to\ do\ this\ functionaility.\ \n
comment22.params=
comment22.target=void\ closeUI()
comment22.text=\n\ This\ will\ close\ the\ UI\ popup.\ \n
comment23.params=
comment23.target=java.lang.String\ getFileName()
comment24.params=
comment24.target=boolean\ isWritingFileName()
comment25.params=word
comment25.target=void\ enterSaveFile(java.lang.String)
comment26.params=name
comment26.target=void\ loadSelectedWorld(java.lang.String)
comment27.params=showSaved
comment27.target=void\ saveToFile(boolean)
comment27.text=\n\ This\ method\ will\ take\ all\ objects\ in\ the\ Editor\ and\ save\ it\ to\ a\ txt\ file.\n
comment28.params=arr
comment28.target=double[]\ stringArrToDouble(java.lang.String[])
comment28.text=\n\ A\ helper\ method\ for\ the\ readFile\ method.\n
comment29.params=fileName
comment29.target=java.util.Scanner\ getTextFile(java.lang.String)
comment3.params=word
comment3.target=void\ clickedBtn(java.lang.String)
comment3.text=\n\ when\ the\ user\ right\ clicks\ on\ a\ ui\ word,\ this\ method\ will\ place\ all\ of\ the\ ui\ elements.\n
comment30.params=nameOfThisFile\ showNotification
comment30.target=void\ readFile(java.lang.String,\ boolean)
comment30.text=\n\ This\ will\ read\ a\ file\ and\ construct\ all\ of\ the\ elements\ into\ the\ screen.\n
comment31.params=
comment31.target=int\ getOriginOffsetX()
comment32.params=
comment32.target=int\ getOriginOffsetY()
comment33.params=objectList
comment33.target=void\ moveOrigin(java.util.List)
comment33.text=\n\ this\ is\ used\ to\ pan\ the\ camera\ around\ when\ someone\ is\ building\ the\ world.\n
comment34.params=xAmount\ yAmount
comment34.target=void\ moveEverything(double,\ double)
comment35.params=
comment35.target=void\ recenterOrigin()
comment35.text=\n\ This\ is\ re\ calibrate\ the\ panning\ mechanism\ described\ above.\n
comment36.params=
comment36.target=int\ returnHeroX()
comment37.params=
comment37.target=int\ returnHeroY()
comment38.params=
comment38.target=boolean\ returnHeroDirection()
comment4.params=toX\ toY
comment4.target=void\ clickedObject(double,\ double)
comment4.text=\n\ This\ method\ is\ used\ by\ the\ portal\ gun\ to\ determine\ where\ to\ shoot\ a\ portal.\n
comment5.params=
comment5.target=void\ act()
comment6.params=
comment6.target=java.lang.String\ getOrangePortalData()
comment6.text=\n\ these\ two\ portals\ are\ used\ to\ communicate\ the\ location\ of\ the\ other\ portal\ so\ we\ know\ where\ to\ teleport\ the\ object\n
comment7.params=
comment7.target=java.lang.String\ getBluePortalData()
comment8.params=xLoc\ yLoc\ rise\ run\ isOrangePortal\ collidedObj
comment8.target=void\ changePortal(double,\ double,\ double,\ double,\ boolean,\ greenfoot.Actor)
comment8.text=\n\ This\ method\ calculates\ where\ to\ place\ a\ portal\ that\ has\ intercepted\ a\ portalable\ platform.\ (AKA\ the\ orientation\ and\ location\ of\ the\ portal.)\n
comment9.params=image
comment9.target=void\ ChangeMouseImage(greenfoot.GreenfootImage)
comment9.text=\n\ This\ changes\ the\ cursor\ image.\n
numComments=39
